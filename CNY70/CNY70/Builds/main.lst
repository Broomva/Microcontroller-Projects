   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 111               	.global	LCD_putchar
 113               	LCD_putchar:
 115               	.Ltext1:
   1:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //#include <avr/io.h>
   2:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //#include <avr/delay.h>
   3:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** #define LCD_RS 0
   4:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** #define LCD_RW 1
   5:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** #define LCD_E 2
   6:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 
   7:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //LCD_putchar writes a character to the LCD at the current address,
   8:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //no busy flag check is done before or after
   9:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //the character is written!
  10:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //usage: LCD_putchar('A'); or LCD_putchar(0x55);
  11:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** void LCD_putchar(char data)
  12:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** {
 117               	.LM0:
 118               	.LFBB1:
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
  13:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//PortD is output
  14:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	DDRD = 0xFF;
 124               	.LM1:
 125 0000 9FEF      		ldi r25,lo8(-1)
 126 0002 91BB      		out 0x11,r25
  15:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//put data on bus
  16:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	PORTD = data;
 128               	.LM2:
 129 0004 82BB      		out 0x12,r24
  17:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//RW low, E low
  18:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	PORTC &= ~((1<<LCD_RW)|(1<<LCD_E));
 131               	.LM3:
 132 0006 85B3      		in r24,0x15
 133 0008 897F      		andi r24,lo8(-7)
 134 000a 85BB      		out 0x15,r24
  19:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//RS high, strobe E
  20:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	PORTC |= ((1<<LCD_RS)|(1<<LCD_E));
 136               	.LM4:
 137 000c 85B3      		in r24,0x15
 138 000e 8560      		ori r24,lo8(5)
 139 0010 85BB      		out 0x15,r24
  21:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//the number of nops required varies with your clock frequency, try it out!
  22:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	asm volatile ("nop");
 141               	.LM5:
 142               	/* #APP */
 143               	 ;  22 "/Users/Didi/Desktop/CNY70/CNY70/libLCD.h" 1
 144 0012 0000      		nop
 145               	 ;  0 "" 2
  23:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	asm volatile ("nop");
 147               	.LM6:
 148               	 ;  23 "/Users/Didi/Desktop/CNY70/CNY70/libLCD.h" 1
 149 0014 0000      		nop
 150               	 ;  0 "" 2
  24:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	asm volatile ("nop");
 152               	.LM7:
 153               	 ;  24 "/Users/Didi/Desktop/CNY70/CNY70/libLCD.h" 1
 154 0016 0000      		nop
 155               	 ;  0 "" 2
  25:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	asm volatile ("nop");
 157               	.LM8:
 158               	 ;  25 "/Users/Didi/Desktop/CNY70/CNY70/libLCD.h" 1
 159 0018 0000      		nop
 160               	 ;  0 "" 2
  26:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//RS low again, E low (belongs to strobe)
  27:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	PORTC &= ~((1<<LCD_RS)|(1<<LCD_E));
 162               	.LM9:
 163               	/* #NOAPP */
 164 001a 85B3      		in r24,0x15
 165 001c 8A7F      		andi r24,lo8(-6)
 166 001e 85BB      		out 0x15,r24
  28:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//release bus
  29:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	DDRD = 0;
 168               	.LM10:
 169 0020 11BA      		out 0x11,__zero_reg__
 170 0022 0895      		ret
 172               	.Lscope1:
 174               	.global	LCD_getaddr
 176               	LCD_getaddr:
  30:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** }
  31:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 
  32:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //LCD_getaddress reads the address counter and busy flag. For the address only,
  33:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //mask off bit7 of the return value.
  34:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** char LCD_getaddr(void)
  35:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** {
 178               	.LM11:
 179               	.LFBB2:
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
  36:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//make var for the return value
  37:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	char address;
  38:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//PortD is input
  39:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	DDRD = 0;
 185               	.LM12:
 186 0024 11BA      		out 0x11,__zero_reg__
  40:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//RW high, strobe enable
  41:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	PORTC |= ((1<<LCD_RW)|(1<<LCD_E));
 188               	.LM13:
 189 0026 85B3      		in r24,0x15
 190 0028 8660      		ori r24,lo8(6)
 191 002a 85BB      		out 0x15,r24
  42:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	asm volatile ("nop");
 193               	.LM14:
 194               	/* #APP */
 195               	 ;  42 "/Users/Didi/Desktop/CNY70/CNY70/libLCD.h" 1
 196 002c 0000      		nop
 197               	 ;  0 "" 2
  43:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	asm volatile ("nop");
 199               	.LM15:
 200               	 ;  43 "/Users/Didi/Desktop/CNY70/CNY70/libLCD.h" 1
 201 002e 0000      		nop
 202               	 ;  0 "" 2
  44:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//while E is high, get data from LCD
  45:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	address = PIND;
 204               	.LM16:
 205               	/* #NOAPP */
 206 0030 80B3      		in r24,0x10
  46:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//reset RW to low, E low (for strobe)
  47:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	PORTC &= ~((1<<LCD_RW)|(1<<LCD_E));
 208               	.LM17:
 209 0032 95B3      		in r25,0x15
 210 0034 997F      		andi r25,lo8(-7)
 211 0036 95BB      		out 0x15,r25
  48:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//return address and busy flag
  49:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	return address;
  50:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** }
 213               	.LM18:
 214 0038 0895      		ret
 219               	.Lscope2:
 221               	.global	LCD_wait
 223               	LCD_wait:
  51:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 
  52:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //LCD_wait reads the address counter (which contains the busy flag) and loops until
  53:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //the busy flag is cleared.
  54:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** void LCD_wait(void)
  55:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** {
 225               	.LM19:
 226               	.LFBB3:
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 0 */
 230               	.L__stack_usage = 0
 231               	.L5:
  56:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//get address and busy flag
  57:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//and loop until busy flag cleared
  58:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h ****     while((LCD_getaddr() & 0x80) == 0x80);
 233               	.LM20:
 234 003a 0E94 0000 		call LCD_getaddr
 235 003e 87FD      		sbrc r24,7
 236 0040 00C0      		rjmp .L5
 237               	/* epilogue start */
  59:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** }
 239               	.LM21:
 240 0042 0895      		ret
 242               	.Lscope3:
 245               	.global	LCD_command
 247               	LCD_command:
  60:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 
  61:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //LCD_command works EXACTLY like LCD_putchar, but takes RS low for accessing the command reg
  62:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //see LCD_putchar for details on the code
  63:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** void LCD_command(char command)
  64:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** {
 249               	.LM22:
 250               	.LFBB4:
 251               	/* prologue: function */
 252               	/* frame size = 0 */
 253               	/* stack size = 0 */
 254               	.L__stack_usage = 0
  65:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	DDRD = 0xFF;
 256               	.LM23:
 257 0044 9FEF      		ldi r25,lo8(-1)
 258 0046 91BB      		out 0x11,r25
  66:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	PORTD = command;
 260               	.LM24:
 261 0048 82BB      		out 0x12,r24
  67:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	PORTC &= ~((1<<LCD_RS)|(1<<LCD_RW)|(1<<LCD_E));
 263               	.LM25:
 264 004a 85B3      		in r24,0x15
 265 004c 887F      		andi r24,lo8(-8)
 266 004e 85BB      		out 0x15,r24
  68:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	PORTC |= (1<<LCD_E);
 268               	.LM26:
 269 0050 AA9A      		sbi 0x15,2
  69:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	asm volatile ("nop");
 271               	.LM27:
 272               	/* #APP */
 273               	 ;  69 "/Users/Didi/Desktop/CNY70/CNY70/libLCD.h" 1
 274 0052 0000      		nop
 275               	 ;  0 "" 2
  70:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	asm volatile ("nop");
 277               	.LM28:
 278               	 ;  70 "/Users/Didi/Desktop/CNY70/CNY70/libLCD.h" 1
 279 0054 0000      		nop
 280               	 ;  0 "" 2
  71:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	asm volatile ("nop");
 282               	.LM29:
 283               	 ;  71 "/Users/Didi/Desktop/CNY70/CNY70/libLCD.h" 1
 284 0056 0000      		nop
 285               	 ;  0 "" 2
  72:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	asm volatile ("nop");
 287               	.LM30:
 288               	 ;  72 "/Users/Didi/Desktop/CNY70/CNY70/libLCD.h" 1
 289 0058 0000      		nop
 290               	 ;  0 "" 2
  73:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	PORTC &= ~(1<<LCD_E);
 292               	.LM31:
 293               	/* #NOAPP */
 294 005a AA98      		cbi 0x15,2
  74:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	DDRD = 0;
 296               	.LM32:
 297 005c 11BA      		out 0x11,__zero_reg__
 298 005e 0895      		ret
 300               	.Lscope4:
 302               	.global	LCD_init
 304               	LCD_init:
  75:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** }
  76:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 
  77:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** /*LCD_init initialises the LCD with the following paramters:
  78:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 8 bit mode, 5*7 font, 2 lines (also for 4 lines)
  79:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** auto-inc cursor after write and read
  80:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** cursor and didsplay on, cursor blinking.
  81:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** */
  82:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** void LCD_init(void)
  83:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** {
 306               	.LM33:
 307               	.LFBB5:
 308               	/* prologue: function */
 309               	/* frame size = 0 */
 310               	/* stack size = 0 */
 311               	.L__stack_usage = 0
  84:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//setup the LCD control signals on PortC
  85:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	DDRC |= ((1<<LCD_RS)|(1<<LCD_RW)|(1<<LCD_E));
 313               	.LM34:
 314 0060 84B3      		in r24,0x14
 315 0062 8760      		ori r24,lo8(7)
 316 0064 84BB      		out 0x14,r24
  86:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	PORTC = 0x00;
 318               	.LM35:
 319 0066 15BA      		out 0x15,__zero_reg__
 320               	.LBB12:
 321               	.LBB13:
 323               	.Ltext2:
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****      distribution.
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** /* $Id$ */
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** #endif
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** /** \file */
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     \code
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     \endcode
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** */
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     register.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** */
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** void
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** {
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 	);
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** }
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h ****  */
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** void
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** {
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h **** 	__asm__ volatile (
 325               	.LM36:
 326 0068 8FEF      		ldi r24,lo8(-1)
 327 006a 9FEF      		ldi r25,lo8(-1)
 328               	/* #APP */
 329               	 ;  105 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h" 1
 330 006c 0197      		1: sbiw r24,1
 331 006e 01F4      		brne 1b
 332               	 ;  0 "" 2
 333               	/* #NOAPP */
 334               	.LBE13:
 335               	.LBE12:
 337               	.Ltext3:
  87:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//if called right after power-up, we'll have to wait a bit (fine-tune for faster execution)
  88:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	_delay_loop_2(0xFFFF);
  89:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//tell the LCD that it's used in 8-bit mode 3 times, each with a delay inbetween.
  90:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	LCD_command(0x30);
 339               	.LM37:
 340 0070 80E3      		ldi r24,lo8(48)
 341 0072 0E94 0000 		call LCD_command
 342               	.LBB14:
 343               	.LBB15:
 345               	.Ltext4:
 347               	.LM38:
 348 0076 8FEF      		ldi r24,lo8(-1)
 349 0078 9FEF      		ldi r25,lo8(-1)
 350               	/* #APP */
 351               	 ;  105 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h" 1
 352 007a 0197      		1: sbiw r24,1
 353 007c 01F4      		brne 1b
 354               	 ;  0 "" 2
 355               	/* #NOAPP */
 356               	.LBE15:
 357               	.LBE14:
 359               	.Ltext5:
  91:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	_delay_loop_2(0xFFFF);
  92:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	LCD_command(0x30);
 361               	.LM39:
 362 007e 80E3      		ldi r24,lo8(48)
 363 0080 0E94 0000 		call LCD_command
 364               	.LBB16:
 365               	.LBB17:
 367               	.Ltext6:
 369               	.LM40:
 370 0084 8FEF      		ldi r24,lo8(-1)
 371 0086 9FEF      		ldi r25,lo8(-1)
 372               	/* #APP */
 373               	 ;  105 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h" 1
 374 0088 0197      		1: sbiw r24,1
 375 008a 01F4      		brne 1b
 376               	 ;  0 "" 2
 377               	/* #NOAPP */
 378               	.LBE17:
 379               	.LBE16:
 381               	.Ltext7:
  93:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	_delay_loop_2(0xFFFF);
  94:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	LCD_command(0x30);
 383               	.LM41:
 384 008c 80E3      		ldi r24,lo8(48)
 385 008e 0E94 0000 		call LCD_command
 386               	.LBB18:
 387               	.LBB19:
 389               	.Ltext8:
 391               	.LM42:
 392 0092 8FEF      		ldi r24,lo8(-1)
 393 0094 9FEF      		ldi r25,lo8(-1)
 394               	/* #APP */
 395               	 ;  105 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay_basic.h" 1
 396 0096 0197      		1: sbiw r24,1
 397 0098 01F4      		brne 1b
 398               	 ;  0 "" 2
 399               	/* #NOAPP */
 400               	.LBE19:
 401               	.LBE18:
 403               	.Ltext9:
  95:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	_delay_loop_2(0xFFFF);
  96:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//now: 8 bit interface, 5*7 font, 2 lines.
  97:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	LCD_command(0x38);
 405               	.LM43:
 406 009a 88E3      		ldi r24,lo8(56)
 407 009c 0E94 0000 		call LCD_command
  98:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//wait until command finished
  99:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	LCD_wait();
 409               	.LM44:
 410 00a0 0E94 0000 		call LCD_wait
 100:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//display on, cursor on (blinking)
 101:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	LCD_command(0x0F);
 412               	.LM45:
 413 00a4 8FE0      		ldi r24,lo8(15)
 414 00a6 0E94 0000 		call LCD_command
 102:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	LCD_wait();
 416               	.LM46:
 417 00aa 0E94 0000 		call LCD_wait
 103:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//now clear the display, cursor home
 104:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	LCD_command(0x01);
 419               	.LM47:
 420 00ae 81E0      		ldi r24,lo8(1)
 421 00b0 0E94 0000 		call LCD_command
 105:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	LCD_wait();
 423               	.LM48:
 424 00b4 0E94 0000 		call LCD_wait
 106:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//cursor auto-inc
 107:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	LCD_command(0x06);
 426               	.LM49:
 427 00b8 86E0      		ldi r24,lo8(6)
 428 00ba 0C94 0000 		jmp LCD_command
 430               	.Lscope5:
 433               	.global	LCD_write
 435               	LCD_write:
 108:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** }
 109:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 
 110:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //now it's time for a simple function for showing strings on the LCD. It uses the low-level
 111:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //functions above. usage example: LCD_write("Hello World!");
 112:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** void LCD_write(char* dstring)
 113:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** {
 437               	.LM50:
 438               	.LFBB6:
 439 00be 0F93      		push r16
 440 00c0 1F93      		push r17
 441 00c2 CF93      		push r28
 442 00c4 DF93      		push r29
 443               	/* prologue: function */
 444               	/* frame size = 0 */
 445               	/* stack size = 4 */
 446               	.L__stack_usage = 4
 447 00c6 EC01      		movw r28,r24
 448               	.L10:
 449 00c8 8E01      		movw r16,r28
 114:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	//is the character pointed at by dstring a zero? If not, write character to LCD
 115:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	while(*dstring)
 451               	.LM51:
 452 00ca 8881      		ld r24,Y
 453 00cc 8823      		tst r24
 454 00ce 01F0      		breq .L12
 116:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	{
 117:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 		//if the LCD is bus, let it finish the current operation
 118:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 		LCD_wait();
 456               	.LM52:
 457 00d0 0E94 0000 		call LCD_wait
 458 00d4 2196      		adiw r28,1
 119:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 		//the write the character from dstring to the LCD, then post-inc the dstring is pointing at.
 120:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 		LCD_putchar(*dstring++);
 460               	.LM53:
 461 00d6 F801      		movw r30,r16
 462 00d8 8081      		ld r24,Z
 463 00da 0E94 0000 		call LCD_putchar
 464 00de 00C0      		rjmp .L10
 465               	.L12:
 466               	/* epilogue start */
 121:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 	}
 122:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** }
 468               	.LM54:
 469 00e0 DF91      		pop r29
 470 00e2 CF91      		pop r28
 471 00e4 1F91      		pop r17
 472 00e6 0F91      		pop r16
 473 00e8 0895      		ret
 475               	.Lscope6:
 479               	.global	LCD_goTo
 481               	LCD_goTo:
 123:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** 
 124:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** //LCD goTo defined position on screen
 125:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** char firstColumnPositionsForLCD[4] = {0, 64, 20, 84};
 126:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** void LCD_goTo(uint8_t x, uint8_t y)
 127:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h **** {
 483               	.LM55:
 484               	.LFBB7:
 485               	/* prologue: function */
 486               	/* frame size = 0 */
 487               	/* stack size = 0 */
 488               	.L__stack_usage = 0
 128:/Users/Didi/Desktop/CNY70/CNY70/libLCD.h ****     LCD_command(0x80 + firstColumnPositionsForLCD[y-1] + (x-1));
 490               	.LM56:
 491 00ea 8158      		subi r24,lo8(-(127))
 492 00ec E62F      		mov r30,r22
 493 00ee F0E0      		ldi r31,0
 494 00f0 E050      		subi r30,lo8(-(firstColumnPositionsForLCD-1))
 495 00f2 F040      		sbci r31,hi8(-(firstColumnPositionsForLCD-1))
 496 00f4 9081      		ld r25,Z
 497 00f6 890F      		add r24,r25
 498 00f8 0C94 0000 		jmp LCD_command
 500               	.Lscope7:
 502               	.global	initIO
 504               	initIO:
 506               	.Ltext10:
   1:/Users/Didi/Desktop/CNY70/CNY70/main.c **** #include <stdio.h>
   2:/Users/Didi/Desktop/CNY70/CNY70/main.c **** #include <avr/io.h>
   3:/Users/Didi/Desktop/CNY70/CNY70/main.c **** #include <avr/interrupt.h>
   4:/Users/Didi/Desktop/CNY70/CNY70/main.c **** #include <util/delay.h>
   5:/Users/Didi/Desktop/CNY70/CNY70/main.c **** #include "libLCD.h"
   6:/Users/Didi/Desktop/CNY70/CNY70/main.c **** 
   7:/Users/Didi/Desktop/CNY70/CNY70/main.c **** void initIO(void) {
 508               	.LM57:
 509               	.LFBB8:
 510               	/* prologue: function */
 511               	/* frame size = 0 */
 512               	/* stack size = 0 */
 513               	.L__stack_usage = 0
 514 00fc 0895      		ret
 516               	.Lscope8:
 517               		.section	.rodata.str1.1,"aMS",@progbits,1
 518               	.LC0:
 519 0000 434E 5937 		.string	"CNY70"
 519      3000 
 520               	.LC1:
 521 0006 3100      		.string	"1"
 522               	.LC2:
 523 0008 3000      		.string	"0"
 524               		.section	.text.startup,"ax",@progbits
 526               	.global	main
 528               	main:
   8:/Users/Didi/Desktop/CNY70/CNY70/main.c **** 	
   9:/Users/Didi/Desktop/CNY70/CNY70/main.c **** }
  10:/Users/Didi/Desktop/CNY70/CNY70/main.c **** 
  11:/Users/Didi/Desktop/CNY70/CNY70/main.c **** char adcResult;
  12:/Users/Didi/Desktop/CNY70/CNY70/main.c **** 
  13:/Users/Didi/Desktop/CNY70/CNY70/main.c **** int main(void) {
 530               	.LM58:
 531               	.LFBB9:
 532               	/* prologue: function */
 533               	/* frame size = 0 */
 534               	/* stack size = 0 */
 535               	.L__stack_usage = 0
  14:/Users/Didi/Desktop/CNY70/CNY70/main.c **** 	initIO();
  15:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  16:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     DDRB |= 0<<0;
 537               	.LM59:
 538 0000 87B3      		in r24,0x17
 539 0002 87BB      		out 0x17,r24
  17:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     DDRC |= 0<<7;
 541               	.LM60:
 542 0004 84B3      		in r24,0x14
 543 0006 84BB      		out 0x14,r24
  18:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  19:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     LCD_init();
 545               	.LM61:
 546 0008 0E94 0000 		call LCD_init
  20:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     LCD_wait();
 548               	.LM62:
 549 000c 0E94 0000 		call LCD_wait
  21:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     LCD_write("CNY70");
 551               	.LM63:
 552 0010 80E0      		ldi r24,lo8(.LC0)
 553 0012 90E0      		ldi r25,hi8(.LC0)
 554 0014 0E94 0000 		call LCD_write
  22:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  23:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     int cn;
  24:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  25:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     //Configure the ADC
  26:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     ADCSRA |= 1 <<ADPS2;
 556               	.LM64:
 557 0018 329A      		sbi 0x6,2
  27:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     ADMUX |= 1 <<ADLAR;
 559               	.LM65:
 560 001a 3D9A      		sbi 0x7,5
  28:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     ADMUX |= 1 <<REFS0;
 562               	.LM66:
 563 001c 3E9A      		sbi 0x7,6
  29:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     ADCSRA |= 1 <<ADIE;
 565               	.LM67:
 566 001e 339A      		sbi 0x6,3
  30:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     ADCSRA |= 1 <<ADEN;
 568               	.LM68:
 569 0020 379A      		sbi 0x6,7
  31:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  32:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     ADCSRA |= 1 <<ADSC;
 571               	.LM69:
 572 0022 369A      		sbi 0x6,6
  33:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     sei();
 574               	.LM70:
 575               	/* #APP */
 576               	 ;  33 "/Users/Didi/Desktop/CNY70/CNY70/main.c" 1
 577 0024 7894      		sei
 578               	 ;  0 "" 2
 579               	/* #NOAPP */
 580               	.L18:
  34:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  35:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  36:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     while (1)
  37:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     {
  38:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         /*
  39:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         int adccny;
  40:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         while (ADCH == 255)
  41:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         {
  42:/Users/Didi/Desktop/CNY70/CNY70/main.c ****             adccny = 1;
  43:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         }
  44:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         
  45:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         while (ADCH != 255)
  46:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         {
  47:/Users/Didi/Desktop/CNY70/CNY70/main.c ****             adccny = 0;
  48:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         }
  49:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         
  50:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         char adccnyr [4];
  51:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         itoa(adccny, adccnyr, 10);
  52:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         LCD_goTo(8, 1);
  53:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         LCD_write("ADCH ");
  54:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         LCD_goTo(8, 1);
  55:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         LCD_write(adccnyr);
  56:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         LCD_goTo(8, 1);
  57:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         LCD_write("   ");
  58:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         */
  59:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         
  60:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         if (adcResult == "1")
 582               	.LM71:
 583 0026 8091 0000 		lds r24,adcResult
 584 002a 90E0      		ldi r25,0
 585 002c 8050      		subi r24,lo8(.LC1)
 586 002e 9040      		sbci r25,hi8(.LC1)
 587 0030 01F4      		brne .L16
  61:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         {
  62:/Users/Didi/Desktop/CNY70/CNY70/main.c ****             PORTC |= 1<<7;
 589               	.LM72:
 590 0032 AF9A      		sbi 0x15,7
 591               	.L16:
  63:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         }
  64:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         
  65:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         if (adcResult == "0")
 593               	.LM73:
 594 0034 8091 0000 		lds r24,adcResult
 595 0038 90E0      		ldi r25,0
 596 003a 8050      		subi r24,lo8(.LC2)
 597 003c 9040      		sbci r25,hi8(.LC2)
 598 003e 01F4      		brne .L18
  66:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         {
  67:/Users/Didi/Desktop/CNY70/CNY70/main.c ****             PORTC |= 0<<7;
 600               	.LM74:
 601 0040 85B3      		in r24,0x15
 602 0042 85BB      		out 0x15,r24
 603 0044 00C0      		rjmp .L18
 605               	.Lscope9:
 606               		.section	.rodata.str1.1
 607               	.LC3:
 608 000a 4144 4348 		.string	"ADCH "
 608      2000 
 609               	.LC4:
 610 0010 2020 2000 		.string	"   "
 611               		.text
 613               	.global	__vector_14
 615               	__vector_14:
  68:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         }
  69:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         
  70:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  71:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     }
  72:/Users/Didi/Desktop/CNY70/CNY70/main.c **** 
  73:/Users/Didi/Desktop/CNY70/CNY70/main.c **** 
  74:/Users/Didi/Desktop/CNY70/CNY70/main.c **** 
  75:/Users/Didi/Desktop/CNY70/CNY70/main.c **** }
  76:/Users/Didi/Desktop/CNY70/CNY70/main.c **** 
  77:/Users/Didi/Desktop/CNY70/CNY70/main.c **** ISR(ADC_vect)
  78:/Users/Didi/Desktop/CNY70/CNY70/main.c **** {
 617               	.LM75:
 618               	.LFBB10:
 619 00fe 1F92      		push r1
 620 0100 0F92      		push r0
 621 0102 0FB6      		in r0,__SREG__
 622 0104 0F92      		push r0
 623 0106 1124      		clr __zero_reg__
 624 0108 2F93      		push r18
 625 010a 3F93      		push r19
 626 010c 4F93      		push r20
 627 010e 5F93      		push r21
 628 0110 6F93      		push r22
 629 0112 7F93      		push r23
 630 0114 8F93      		push r24
 631 0116 9F93      		push r25
 632 0118 AF93      		push r26
 633 011a BF93      		push r27
 634 011c EF93      		push r30
 635 011e FF93      		push r31
 636               	/* prologue: Signal */
 637               	/* frame size = 0 */
 638               	/* stack size = 15 */
 639               	.L__stack_usage = 15
  79:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  80:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  81:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     //itoa(ADCH, adcResult, 10);
  82:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     if (ADCH == 255)
 641               	.LM76:
 642 0120 85B1      		in r24,0x5
 643 0122 8F3F      		cpi r24,lo8(-1)
 644 0124 01F4      		brne .L21
  83:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     {
  84:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         adcResult = "1";
 646               	.LM77:
 647 0126 80E0      		ldi r24,lo8(.LC1)
 648 0128 90E0      		ldi r25,hi8(.LC1)
 649 012a 00C0      		rjmp .L23
 650               	.L21:
  85:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     }
  86:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     else
  87:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     {
  88:/Users/Didi/Desktop/CNY70/CNY70/main.c ****         adcResult = "0";
 652               	.LM78:
 653 012c 80E0      		ldi r24,lo8(.LC2)
 654 012e 90E0      		ldi r25,hi8(.LC2)
 655               	.L23:
 656 0130 8093 0000 		sts adcResult,r24
  89:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     }
  90:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  91:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  92:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     LCD_goTo(1, 2);
 658               	.LM79:
 659 0134 62E0      		ldi r22,lo8(2)
 660 0136 81E0      		ldi r24,lo8(1)
 661 0138 0E94 0000 		call LCD_goTo
  93:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     LCD_write("ADCH ");
 663               	.LM80:
 664 013c 80E0      		ldi r24,lo8(.LC3)
 665 013e 90E0      		ldi r25,hi8(.LC3)
 666 0140 0E94 0000 		call LCD_write
  94:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     LCD_goTo(1, 2);
 668               	.LM81:
 669 0144 62E0      		ldi r22,lo8(2)
 670 0146 81E0      		ldi r24,lo8(1)
 671 0148 0E94 0000 		call LCD_goTo
  95:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     LCD_write(adcResult);
 673               	.LM82:
 674 014c 8091 0000 		lds r24,adcResult
 675 0150 90E0      		ldi r25,0
 676 0152 0E94 0000 		call LCD_write
  96:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     LCD_goTo(1, 2);
 678               	.LM83:
 679 0156 62E0      		ldi r22,lo8(2)
 680 0158 81E0      		ldi r24,lo8(1)
 681 015a 0E94 0000 		call LCD_goTo
  97:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     LCD_write("   ");
 683               	.LM84:
 684 015e 80E0      		ldi r24,lo8(.LC4)
 685 0160 90E0      		ldi r25,hi8(.LC4)
 686 0162 0E94 0000 		call LCD_write
  98:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
  99:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
 100:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
 101:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     ADCSRA |= 1 <<ADSC;
 688               	.LM85:
 689 0166 369A      		sbi 0x6,6
 690               	/* epilogue start */
 102:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
 103:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
 104:/Users/Didi/Desktop/CNY70/CNY70/main.c ****     
 105:/Users/Didi/Desktop/CNY70/CNY70/main.c **** }
 692               	.LM86:
 693 0168 FF91      		pop r31
 694 016a EF91      		pop r30
 695 016c BF91      		pop r27
 696 016e AF91      		pop r26
 697 0170 9F91      		pop r25
 698 0172 8F91      		pop r24
 699 0174 7F91      		pop r23
 700 0176 6F91      		pop r22
 701 0178 5F91      		pop r21
 702 017a 4F91      		pop r20
 703 017c 3F91      		pop r19
 704 017e 2F91      		pop r18
 705 0180 0F90      		pop r0
 706 0182 0FBE      		out __SREG__,r0
 707 0184 0F90      		pop r0
 708 0186 1F90      		pop r1
 709 0188 1895      		reti
 711               	.Lscope10:
 712               		.comm	adcResult,1,1
 713               	.global	firstColumnPositionsForLCD
 714               		.data
 717               	firstColumnPositionsForLCD:
 718 0000 00        		.byte	0
 719 0001 40        		.byte	64
 720 0002 14        		.byte	20
 721 0003 54        		.byte	84
 724               		.text
 726               	.Letext0:
 727               		.ident	"GCC: (GNU) 4.8.1"
 728               	.global __do_copy_data
 729               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:2      *ABS*:0000003e __SP_H__
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:3      *ABS*:0000003d __SP_L__
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:4      *ABS*:0000003f __SREG__
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:6      *ABS*:00000001 __zero_reg__
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:113    .text:00000000 LCD_putchar
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:176    .text:00000024 LCD_getaddr
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:223    .text:0000003a LCD_wait
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:247    .text:00000044 LCD_command
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:304    .text:00000060 LCD_init
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:435    .text:000000be LCD_write
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:481    .text:000000ea LCD_goTo
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:717    .data:00000000 firstColumnPositionsForLCD
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:504    .text:000000fc initIO
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:528    .text.startup:00000000 main
                            *COM*:00000001 adcResult
/var/folders/yr/91gvm84j38g9s989qv2v5ks40000gn/T//cc9seZQJ.s:615    .text:000000fe __vector_14

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
