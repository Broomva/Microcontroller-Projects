
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000266  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800076  00800076  00000310  2**0
                  ALLOC
  3 .stab         00000a44  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f06  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00001c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000023a  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000003c  00000000  00000000  00001f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000117  00000000  00000000  00001f46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  8a:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_putchar>:
//the character is written!
//usage: LCD_putchar('A'); or LCD_putchar(0x55);
void LCD_putchar(char data)
{
	//PortD is output
	DDRD = 0xFF;
  92:	9f ef       	ldi	r25, 0xFF	; 255
  94:	91 bb       	out	0x11, r25	; 17
	//put data on bus
	PORTD = data;
  96:	82 bb       	out	0x12, r24	; 18
	//RW low, E low
	PORTC &= ~((1<<LCD_RW)|(1<<LCD_E));
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	89 7f       	andi	r24, 0xF9	; 249
  9c:	85 bb       	out	0x15, r24	; 21
	//RS high, strobe E
	PORTC |= ((1<<LCD_RS)|(1<<LCD_E));
  9e:	85 b3       	in	r24, 0x15	; 21
  a0:	85 60       	ori	r24, 0x05	; 5
  a2:	85 bb       	out	0x15, r24	; 21
	...
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	//RS low again, E low (belongs to strobe)
	PORTC &= ~((1<<LCD_RS)|(1<<LCD_E));
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	8a 7f       	andi	r24, 0xFA	; 250
  b0:	85 bb       	out	0x15, r24	; 21
	//release bus
	DDRD = 0;
  b2:	11 ba       	out	0x11, r1	; 17
  b4:	08 95       	ret

000000b6 <LCD_getaddr>:
char LCD_getaddr(void)
{
	//make var for the return value
	char address;
	//PortD is input
	DDRD = 0;
  b6:	11 ba       	out	0x11, r1	; 17
	//RW high, strobe enable
	PORTC |= ((1<<LCD_RW)|(1<<LCD_E));
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	86 60       	ori	r24, 0x06	; 6
  bc:	85 bb       	out	0x15, r24	; 21
	asm volatile ("nop");
  be:	00 00       	nop
	asm volatile ("nop");
  c0:	00 00       	nop
	//while E is high, get data from LCD
	address = PIND;
  c2:	80 b3       	in	r24, 0x10	; 16
	//reset RW to low, E low (for strobe)
	PORTC &= ~((1<<LCD_RW)|(1<<LCD_E));
  c4:	95 b3       	in	r25, 0x15	; 21
  c6:	99 7f       	andi	r25, 0xF9	; 249
  c8:	95 bb       	out	0x15, r25	; 21
	//return address and busy flag
	return address;
}
  ca:	08 95       	ret

000000cc <LCD_wait>:
//the busy flag is cleared.
void LCD_wait(void)
{
	//get address and busy flag
	//and loop until busy flag cleared
    while((LCD_getaddr() & 0x80) == 0x80);
  cc:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_getaddr>
  d0:	87 fd       	sbrc	r24, 7
  d2:	fc cf       	rjmp	.-8      	; 0xcc <LCD_wait>
}
  d4:	08 95       	ret

000000d6 <LCD_command>:

//LCD_command works EXACTLY like LCD_putchar, but takes RS low for accessing the command reg
//see LCD_putchar for details on the code
void LCD_command(char command)
{
	DDRD = 0xFF;
  d6:	9f ef       	ldi	r25, 0xFF	; 255
  d8:	91 bb       	out	0x11, r25	; 17
	PORTD = command;
  da:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~((1<<LCD_RS)|(1<<LCD_RW)|(1<<LCD_E));
  dc:	85 b3       	in	r24, 0x15	; 21
  de:	88 7f       	andi	r24, 0xF8	; 248
  e0:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_E);
  e2:	aa 9a       	sbi	0x15, 2	; 21
	...
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	PORTC &= ~(1<<LCD_E);
  ec:	aa 98       	cbi	0x15, 2	; 21
	DDRD = 0;
  ee:	11 ba       	out	0x11, r1	; 17
  f0:	08 95       	ret

000000f2 <LCD_init>:
cursor and didsplay on, cursor blinking.
*/
void LCD_init(void)
{
	//setup the LCD control signals on PortC
	DDRC |= ((1<<LCD_RS)|(1<<LCD_RW)|(1<<LCD_E));
  f2:	84 b3       	in	r24, 0x14	; 20
  f4:	87 60       	ori	r24, 0x07	; 7
  f6:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  f8:	15 ba       	out	0x15, r1	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	9f ef       	ldi	r25, 0xFF	; 255
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_init+0xc>
	//if called right after power-up, we'll have to wait a bit (fine-tune for faster execution)
	_delay_loop_2(0xFFFF);
	//tell the LCD that it's used in 8-bit mode 3 times, each with a delay inbetween.
	LCD_command(0x30);
 102:	80 e3       	ldi	r24, 0x30	; 48
 104:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_command>
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	9f ef       	ldi	r25, 0xFF	; 255
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_init+0x1a>
	_delay_loop_2(0xFFFF);
	LCD_command(0x30);
 110:	80 e3       	ldi	r24, 0x30	; 48
 112:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_command>
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	9f ef       	ldi	r25, 0xFF	; 255
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_init+0x28>
	_delay_loop_2(0xFFFF);
	LCD_command(0x30);
 11e:	80 e3       	ldi	r24, 0x30	; 48
 120:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_command>
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	9f ef       	ldi	r25, 0xFF	; 255
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_init+0x36>
	_delay_loop_2(0xFFFF);
	//now: 8 bit interface, 5*7 font, 2 lines.
	LCD_command(0x38);
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_command>
	//wait until command finished
	LCD_wait();
 132:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_wait>
	//display on, cursor on (blinking)
	LCD_command(0x0F);
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_command>
	LCD_wait();
 13c:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_wait>
	//now clear the display, cursor home
	LCD_command(0x01);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_command>
	LCD_wait();
 146:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_wait>
	//cursor auto-inc
	LCD_command(0x06);
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <LCD_command>

00000150 <LCD_write>:
}

//now it's time for a simple function for showing strings on the LCD. It uses the low-level
//functions above. usage example: LCD_write("Hello World!");
void LCD_write(char* dstring)
{
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
 15a:	8e 01       	movw	r16, r28
	//is the character pointed at by dstring a zero? If not, write character to LCD
	while(*dstring)
 15c:	88 81       	ld	r24, Y
 15e:	88 23       	and	r24, r24
 160:	41 f0       	breq	.+16     	; 0x172 <LCD_write+0x22>
	{
		//if the LCD is bus, let it finish the current operation
		LCD_wait();
 162:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_wait>
 166:	21 96       	adiw	r28, 0x01	; 1
		//the write the character from dstring to the LCD, then post-inc the dstring is pointing at.
		LCD_putchar(*dstring++);
 168:	f8 01       	movw	r30, r16
 16a:	80 81       	ld	r24, Z
 16c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_putchar>
 170:	f4 cf       	rjmp	.-24     	; 0x15a <LCD_write+0xa>
	}
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <LCD_goTo>:

//LCD goTo defined position on screen
char firstColumnPositionsForLCD[4] = {0, 64, 20, 84};
void LCD_goTo(uint8_t x, uint8_t y)
{
    LCD_command(0x80 + firstColumnPositionsForLCD[y-1] + (x-1));
 17c:	81 58       	subi	r24, 0x81	; 129
 17e:	e6 2f       	mov	r30, r22
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e1 5a       	subi	r30, 0xA1	; 161
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	90 81       	ld	r25, Z
 188:	89 0f       	add	r24, r25
 18a:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <LCD_command>

0000018e <initIO>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "libLCD.h"

void initIO(void) {
 18e:	08 95       	ret

00000190 <__vector_14>:
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
 1b2:	85 b1       	in	r24, 0x05	; 5
 1b4:	8f 3f       	cpi	r24, 0xFF	; 255
 1b6:	19 f4       	brne	.+6      	; 0x1be <__vector_14+0x2e>
 1b8:	8a e6       	ldi	r24, 0x6A	; 106
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__vector_14+0x32>
 1be:	88 e6       	ldi	r24, 0x68	; 104
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	80 93 76 00 	sts	0x0076, r24
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_goTo>
 1ce:	8c e6       	ldi	r24, 0x6C	; 108
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_write>
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_goTo>
 1de:	80 91 76 00 	lds	r24, 0x0076
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_write>
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_goTo>
 1f0:	82 e7       	ldi	r24, 0x72	; 114
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_write>
 1f8:	36 9a       	sbi	0x06, 6	; 6
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	7f 91       	pop	r23
 208:	6f 91       	pop	r22
 20a:	5f 91       	pop	r21
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <main>:
char adcResult;

int main(void) {
	initIO();
    
    DDRB |= 0<<0;
 21c:	87 b3       	in	r24, 0x17	; 23
 21e:	87 bb       	out	0x17, r24	; 23
    DDRC |= 0<<7;
 220:	84 b3       	in	r24, 0x14	; 20
 222:	84 bb       	out	0x14, r24	; 20
    
    LCD_init();
 224:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_init>
    LCD_wait();
 228:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_wait>
    LCD_write("CNY70");
 22c:	84 e6       	ldi	r24, 0x64	; 100
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_write>
    
    int cn;
    
    //Configure the ADC
    ADCSRA |= 1 <<ADPS2;
 234:	32 9a       	sbi	0x06, 2	; 6
    ADMUX |= 1 <<ADLAR;
 236:	3d 9a       	sbi	0x07, 5	; 7
    ADMUX |= 1 <<REFS0;
 238:	3e 9a       	sbi	0x07, 6	; 7
    ADCSRA |= 1 <<ADIE;
 23a:	33 9a       	sbi	0x06, 3	; 6
    ADCSRA |= 1 <<ADEN;
 23c:	37 9a       	sbi	0x06, 7	; 6
    
    ADCSRA |= 1 <<ADSC;
 23e:	36 9a       	sbi	0x06, 6	; 6
    sei();
 240:	78 94       	sei
        LCD_write(adccnyr);
        LCD_goTo(8, 1);
        LCD_write("   ");
        */
        
        if (adcResult == "1")
 242:	80 91 76 00 	lds	r24, 0x0076
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	8a 56       	subi	r24, 0x6A	; 106
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	09 f4       	brne	.+2      	; 0x250 <main+0x34>
        {
            PORTC |= 1<<7;
 24e:	af 9a       	sbi	0x15, 7	; 21
        }
        
        if (adcResult == "0")
 250:	80 91 76 00 	lds	r24, 0x0076
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	88 56       	subi	r24, 0x68	; 104
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	99 f7       	brne	.-26     	; 0x242 <main+0x26>
        {
            PORTC |= 0<<7;
 25c:	85 b3       	in	r24, 0x15	; 21
 25e:	85 bb       	out	0x15, r24	; 21
 260:	f0 cf       	rjmp	.-32     	; 0x242 <main+0x26>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
