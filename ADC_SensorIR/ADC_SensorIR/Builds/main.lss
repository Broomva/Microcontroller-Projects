
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  0000037e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000b94  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f9f  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001f6f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00001f80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000017c  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000028  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000b9  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_14>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 18 01 	call	0x230	; 0x230 <main>
  7a:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_putchar>:
//the character is written!
//usage: LCD_putchar('A'); or LCD_putchar(0x55);
void LCD_putchar(char data)
{
	//PortD is output
	DDRD = 0xFF;
  82:	9f ef       	ldi	r25, 0xFF	; 255
  84:	91 bb       	out	0x11, r25	; 17
	//put data on bus
	PORTD = data;
  86:	82 bb       	out	0x12, r24	; 18
	//RW low, E low
	PORTC &= ~((1<<LCD_RW)|(1<<LCD_E));
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	89 7f       	andi	r24, 0xF9	; 249
  8c:	85 bb       	out	0x15, r24	; 21
	//RS high, strobe E
	PORTC |= ((1<<LCD_RS)|(1<<LCD_E));
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	85 60       	ori	r24, 0x05	; 5
  92:	85 bb       	out	0x15, r24	; 21
	...
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	//RS low again, E low (belongs to strobe)
	PORTC &= ~((1<<LCD_RS)|(1<<LCD_E));
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	8a 7f       	andi	r24, 0xFA	; 250
  a0:	85 bb       	out	0x15, r24	; 21
	//release bus
	DDRD = 0;
  a2:	11 ba       	out	0x11, r1	; 17
  a4:	08 95       	ret

000000a6 <LCD_getaddr>:
char LCD_getaddr(void)
{
	//make var for the return value
	char address;
	//PortD is input
	DDRD = 0;
  a6:	11 ba       	out	0x11, r1	; 17
	//RW high, strobe enable
	PORTC |= ((1<<LCD_RW)|(1<<LCD_E));
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	86 60       	ori	r24, 0x06	; 6
  ac:	85 bb       	out	0x15, r24	; 21
	asm volatile ("nop");
  ae:	00 00       	nop
	asm volatile ("nop");
  b0:	00 00       	nop
	//while E is high, get data from LCD
	address = PIND;
  b2:	80 b3       	in	r24, 0x10	; 16
	//reset RW to low, E low (for strobe)
	PORTC &= ~((1<<LCD_RW)|(1<<LCD_E));
  b4:	95 b3       	in	r25, 0x15	; 21
  b6:	99 7f       	andi	r25, 0xF9	; 249
  b8:	95 bb       	out	0x15, r25	; 21
	//return address and busy flag
	return address;
}
  ba:	08 95       	ret

000000bc <LCD_wait>:
//the busy flag is cleared.
void LCD_wait(void)
{
	//get address and busy flag
	//and loop until busy flag cleared
    while((LCD_getaddr() & 0x80) == 0x80);
  bc:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_getaddr>
  c0:	87 fd       	sbrc	r24, 7
  c2:	fc cf       	rjmp	.-8      	; 0xbc <LCD_wait>
}
  c4:	08 95       	ret

000000c6 <LCD_command>:

//LCD_command works EXACTLY like LCD_putchar, but takes RS low for accessing the command reg
//see LCD_putchar for details on the code
void LCD_command(char command)
{
	DDRD = 0xFF;
  c6:	9f ef       	ldi	r25, 0xFF	; 255
  c8:	91 bb       	out	0x11, r25	; 17
	PORTD = command;
  ca:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~((1<<LCD_RS)|(1<<LCD_RW)|(1<<LCD_E));
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_E);
  d2:	aa 9a       	sbi	0x15, 2	; 21
	...
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	PORTC &= ~(1<<LCD_E);
  dc:	aa 98       	cbi	0x15, 2	; 21
	DDRD = 0;
  de:	11 ba       	out	0x11, r1	; 17
  e0:	08 95       	ret

000000e2 <LCD_init>:
cursor and didsplay on, cursor blinking.
*/
void LCD_init(void)
{
	//setup the LCD control signals on PortC
	DDRC |= ((1<<LCD_RS)|(1<<LCD_RW)|(1<<LCD_E));
  e2:	84 b3       	in	r24, 0x14	; 20
  e4:	87 60       	ori	r24, 0x07	; 7
  e6:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  e8:	15 ba       	out	0x15, r1	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	9f ef       	ldi	r25, 0xFF	; 255
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_init+0xc>
	//if called right after power-up, we'll have to wait a bit (fine-tune for faster execution)
	_delay_loop_2(0xFFFF);
	//tell the LCD that it's used in 8-bit mode 3 times, each with a delay inbetween.
	LCD_command(0x30);
  f2:	80 e3       	ldi	r24, 0x30	; 48
  f4:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	9f ef       	ldi	r25, 0xFF	; 255
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_init+0x1a>
	_delay_loop_2(0xFFFF);
	LCD_command(0x30);
 100:	80 e3       	ldi	r24, 0x30	; 48
 102:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_init+0x28>
	_delay_loop_2(0xFFFF);
	LCD_command(0x30);
 10e:	80 e3       	ldi	r24, 0x30	; 48
 110:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_init+0x36>
	_delay_loop_2(0xFFFF);
	//now: 8 bit interface, 5*7 font, 2 lines.
	LCD_command(0x38);
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
	//wait until command finished
	LCD_wait();
 122:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
	//display on, cursor on (blinking)
	LCD_command(0x0F);
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
	LCD_wait();
 12c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
	//now clear the display, cursor home
	LCD_command(0x01);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
	LCD_wait();
 136:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
	//cursor auto-inc
	LCD_command(0x06);
 13a:	86 e0       	ldi	r24, 0x06	; 6
 13c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <LCD_command>

00000140 <LCD_write>:
}

//now it's time for a simple function for showing strings on the LCD. It uses the low-level
//functions above. usage example: LCD_write("Hello World!");
void LCD_write(char* dstring)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
 14a:	8e 01       	movw	r16, r28
	//is the character pointed at by dstring a zero? If not, write character to LCD
	while(*dstring)
 14c:	88 81       	ld	r24, Y
 14e:	88 23       	and	r24, r24
 150:	41 f0       	breq	.+16     	; 0x162 <LCD_write+0x22>
	{
		//if the LCD is bus, let it finish the current operation
		LCD_wait();
 152:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
 156:	21 96       	adiw	r28, 0x01	; 1
		//the write the character from dstring to the LCD, then post-inc the dstring is pointing at.
		LCD_putchar(*dstring++);
 158:	f8 01       	movw	r30, r16
 15a:	80 81       	ld	r24, Z
 15c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_putchar>
 160:	f4 cf       	rjmp	.-24     	; 0x14a <LCD_write+0xa>
	}
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret

0000016c <LCD_goTo>:

//LCD goTo defined position on screen
char firstColumnPositionsForLCD[4] = {0, 64, 20, 84};
void LCD_goTo(uint8_t x, uint8_t y)
{
    LCD_command(0x80 + firstColumnPositionsForLCD[y-1] + (x-1));
 16c:	81 58       	subi	r24, 0x81	; 129
 16e:	e6 2f       	mov	r30, r22
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e1 5a       	subi	r30, 0xA1	; 161
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	90 81       	ld	r25, Z
 178:	89 0f       	add	r24, r25
 17a:	0c 94 63 00 	jmp	0xc6	; 0xc6 <LCD_command>

0000017e <initIO>:
 LCD_RS-RW-EN ---> Pin0-Pin1-Pin2, DDRC
 ADC_SensorIR ---> Pin0, DDRA
 Resolucion ADC = 8bits
*/

void initIO(void) {
 17e:	08 95       	ret

00000180 <__vector_14>:
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <__vector_14+0x28>
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <__vector_14+0x2a>
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	81 ee       	ldi	r24, 0xE1	; 225
 1b2:	94 e0       	ldi	r25, 0x04	; 4
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <__vector_14+0x34>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <__vector_14+0x3e>
 1be:	00 00       	nop
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	4a e0       	ldi	r20, 0x0A	; 10
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	be 01       	movw	r22, r28
 1c8:	6f 5f       	subi	r22, 0xFF	; 255
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 7d 01 	call	0x2fa	; 0x2fa <itoa>
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_goTo>
 1da:	8f e9       	ldi	r24, 0x9F	; 159
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_write>
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_goTo>
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_write>
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_goTo>
 1fa:	85 ea       	ldi	r24, 0xA5	; 165
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_write>
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	7f 91       	pop	r23
 21c:	6f 91       	pop	r22
 21e:	5f 91       	pop	r21
 220:	4f 91       	pop	r20
 222:	3f 91       	pop	r19
 224:	2f 91       	pop	r18
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <main>:
    
}

int main(void)
{
    LCD_init();
 230:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_init>
    LCD_wait();
 234:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
    LCD_write("Created by");
 238:	84 e6       	ldi	r24, 0x64	; 100
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_write>
    LCD_wait();
 240:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
    LCD_command(0xC0);
 244:	80 ec       	ldi	r24, 0xC0	; 192
 246:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
    LCD_wait();
 24a:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
    LCD_write("Magic");
 24e:	8f e6       	ldi	r24, 0x6F	; 111
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	83 ed       	ldi	r24, 0xD3	; 211
 25a:	90 e3       	ldi	r25, 0x30	; 48
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x2c>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x36>
 266:	00 00       	nop
    _delay_ms(1000);
    LCD_command(0b00000001);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
    LCD_wait();
 26e:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
    LCD_write("Cargando Sensor");
 272:	85 e7       	ldi	r24, 0x75	; 117
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_write>
    LCD_wait();
 27a:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
    LCD_command(0xC0);
 27e:	80 ec       	ldi	r24, 0xC0	; 192
 280:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
    LCD_wait();
 284:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
    for (int load=1; load<=16; load++)
 288:	c1 e0       	ldi	r28, 0x01	; 1
 28a:	d0 e0       	ldi	r29, 0x00	; 0
    {
        LCD_write("-");
 28c:	85 e8       	ldi	r24, 0x85	; 133
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_write>
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	81 ee       	ldi	r24, 0xE1	; 225
 298:	94 e0       	ldi	r25, 0x04	; 4
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x6a>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x74>
 2a4:	00 00       	nop
        _delay_ms(100);
        if (load==16)
 2a6:	c0 31       	cpi	r28, 0x10	; 16
 2a8:	d1 05       	cpc	r29, r1
 2aa:	a9 f4       	brne	.+42     	; 0x2d6 <main+0xa6>
        {
            LCD_command(0b00000001);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
            LCD_write("Carga Completa");
 2b2:	87 e8       	ldi	r24, 0x87	; 135
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_write>
 2ba:	2f ef       	ldi	r18, 0xFF	; 255
 2bc:	83 ed       	ldi	r24, 0xD3	; 211
 2be:	90 e3       	ldi	r25, 0x30	; 48
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	90 40       	sbci	r25, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x90>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x9a>
 2ca:	00 00       	nop
            _delay_ms(1000);
            LCD_command(0b00000001);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_command>
            LCD_wait();
 2d2:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
    LCD_wait();
    LCD_write("Cargando Sensor");
    LCD_wait();
    LCD_command(0xC0);
    LCD_wait();
    for (int load=1; load<=16; load++)
 2d6:	21 96       	adiw	r28, 0x01	; 1
 2d8:	c1 31       	cpi	r28, 0x11	; 17
 2da:	d1 05       	cpc	r29, r1
 2dc:	b9 f6       	brne	.-82     	; 0x28c <main+0x5c>
            _delay_ms(1000);
            LCD_command(0b00000001);
            LCD_wait();
        }
    }
    LCD_write("Leyendo:");
 2de:	86 e9       	ldi	r24, 0x96	; 150
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_write>
    LCD_wait();
 2e6:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_wait>
    
    
    //Configure the ADC
    ADCSRA |= 1 <<ADPS2;
 2ea:	32 9a       	sbi	0x06, 2	; 6
    ADMUX |= 1 <<ADLAR;
 2ec:	3d 9a       	sbi	0x07, 5	; 7
    ADMUX |= 1 <<REFS0;
 2ee:	3e 9a       	sbi	0x07, 6	; 7
    ADCSRA |= 1 <<ADIE;
 2f0:	33 9a       	sbi	0x06, 3	; 6
    ADCSRA |= 1 <<ADEN;
 2f2:	37 9a       	sbi	0x06, 7	; 6
    
    sei();
 2f4:	78 94       	sei
    
    while (1)
    {
        ADCSRA |= 1 <<ADSC;
 2f6:	36 9a       	sbi	0x06, 6	; 6
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <main+0xc6>

000002fa <itoa>:
 2fa:	45 32       	cpi	r20, 0x25	; 37
 2fc:	51 05       	cpc	r21, r1
 2fe:	20 f4       	brcc	.+8      	; 0x308 <itoa+0xe>
 300:	42 30       	cpi	r20, 0x02	; 2
 302:	10 f0       	brcs	.+4      	; 0x308 <itoa+0xe>
 304:	0c 94 88 01 	jmp	0x310	; 0x310 <__itoa_ncheck>
 308:	fb 01       	movw	r30, r22
 30a:	10 82       	st	Z, r1
 30c:	cb 01       	movw	r24, r22
 30e:	08 95       	ret

00000310 <__itoa_ncheck>:
 310:	bb 27       	eor	r27, r27
 312:	4a 30       	cpi	r20, 0x0A	; 10
 314:	31 f4       	brne	.+12     	; 0x322 <__itoa_ncheck+0x12>
 316:	99 23       	and	r25, r25
 318:	22 f4       	brpl	.+8      	; 0x322 <__itoa_ncheck+0x12>
 31a:	bd e2       	ldi	r27, 0x2D	; 45
 31c:	90 95       	com	r25
 31e:	81 95       	neg	r24
 320:	9f 4f       	sbci	r25, 0xFF	; 255
 322:	0c 94 94 01 	jmp	0x328	; 0x328 <__utoa_common>

00000326 <__utoa_ncheck>:
 326:	bb 27       	eor	r27, r27

00000328 <__utoa_common>:
 328:	fb 01       	movw	r30, r22
 32a:	55 27       	eor	r21, r21
 32c:	aa 27       	eor	r26, r26
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	aa 1f       	adc	r26, r26
 334:	a4 17       	cp	r26, r20
 336:	10 f0       	brcs	.+4      	; 0x33c <__utoa_common+0x14>
 338:	a4 1b       	sub	r26, r20
 33a:	83 95       	inc	r24
 33c:	50 51       	subi	r21, 0x10	; 16
 33e:	b9 f7       	brne	.-18     	; 0x32e <__utoa_common+0x6>
 340:	a0 5d       	subi	r26, 0xD0	; 208
 342:	aa 33       	cpi	r26, 0x3A	; 58
 344:	08 f0       	brcs	.+2      	; 0x348 <__utoa_common+0x20>
 346:	a9 5d       	subi	r26, 0xD9	; 217
 348:	a1 93       	st	Z+, r26
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	79 f7       	brne	.-34     	; 0x32c <__utoa_common+0x4>
 34e:	b1 11       	cpse	r27, r1
 350:	b1 93       	st	Z+, r27
 352:	11 92       	st	Z+, r1
 354:	cb 01       	movw	r24, r22
 356:	0c 94 ad 01 	jmp	0x35a	; 0x35a <strrev>

0000035a <strrev>:
 35a:	dc 01       	movw	r26, r24
 35c:	fc 01       	movw	r30, r24
 35e:	67 2f       	mov	r22, r23
 360:	71 91       	ld	r23, Z+
 362:	77 23       	and	r23, r23
 364:	e1 f7       	brne	.-8      	; 0x35e <strrev+0x4>
 366:	32 97       	sbiw	r30, 0x02	; 2
 368:	04 c0       	rjmp	.+8      	; 0x372 <strrev+0x18>
 36a:	7c 91       	ld	r23, X
 36c:	6d 93       	st	X+, r22
 36e:	70 83       	st	Z, r23
 370:	62 91       	ld	r22, -Z
 372:	ae 17       	cp	r26, r30
 374:	bf 07       	cpc	r27, r31
 376:	c8 f3       	brcs	.-14     	; 0x36a <strrev+0x10>
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
