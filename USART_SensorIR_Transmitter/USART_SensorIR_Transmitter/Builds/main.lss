
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000005c4  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dff  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000014e7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000014f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000be  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  000015d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000058  00000000  00000000  000015ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initIO>:
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

void initIO(void) {
  6c:	08 95       	ret

0000006e <uart_init>:
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)            // set baud rate value for UBRR

// function to initialize UART
void uart_init (void)
{
    UBRRH = (BAUDRATE>>8);                          // shift the register right by 8 bits
  6e:	10 bc       	out	0x20, r1	; 32
    UBRRL = BAUDRATE;                               // set baud rate
  70:	87 e6       	ldi	r24, 0x67	; 103
  72:	89 b9       	out	0x09, r24	; 9
    UCSRB|= (1<<TXEN);                              // enable transmitter
  74:	53 9a       	sbi	0x0a, 3	; 10
    UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);       // 8bit data format
  76:	80 b5       	in	r24, 0x20	; 32
  78:	86 68       	ori	r24, 0x86	; 134
  7a:	80 bd       	out	0x20, r24	; 32
  7c:	08 95       	ret

0000007e <uart_transmit>:
 Funcion Para Enviar Datos
 */

void uart_transmit (unsigned char data)
{
    while (!( UCSRA & (1<<UDRE)));                // wait while register is free
  7e:	5d 9b       	sbis	0x0b, 5	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <uart_transmit>
    UDR = data;                                   // load data in the register
  82:	8c b9       	out	0x0c, r24	; 12
  84:	08 95       	ret

00000086 <main>:


int main(void) {
    initIO();
    
    uart_init();
  86:	0e 94 37 00 	call	0x6e	; 0x6e <uart_init>
    */
    
    while (1)
    {
        int Transfer = 5;
        uart_transmit(Transfer);
  8a:	85 e0       	ldi	r24, 0x05	; 5
  8c:	0e 94 3f 00 	call	0x7e	; 0x7e <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	83 e2       	ldi	r24, 0x23	; 35
  94:	94 ef       	ldi	r25, 0xF4	; 244
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x10>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x1a>
  a0:	00 00       	nop
        _delay_ms(5000);
        Transfer = 230;
        uart_transmit(Transfer);
  a2:	86 ee       	ldi	r24, 0xE6	; 230
  a4:	0e 94 3f 00 	call	0x7e	; 0x7e <uart_transmit>
  a8:	f0 cf       	rjmp	.-32     	; 0x8a <main+0x4>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
